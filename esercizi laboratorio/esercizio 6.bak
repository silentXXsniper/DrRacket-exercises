#lang racket
(define diff-pre
  (lambda (text1 text2)
    (let cycle((t1 text1) (t2 text2) (i 1) (j 1) (result '()))
        (cond [(and(null? t1) (null? t2))result];caso ambidue vuoti
              [(null? t1)(cycle t1 (cdr t2) i (+ j 1)(cons (list i 'a j (car t2)) result))];text1 finito o nullo registrA solo seconDo
              [(null? t2)(cycle (cdr t1) t2 (+ i 1) j(cons (list i 'd j (car t1)) result))];text2 finito o nullo registra solo sEcondo
              [(string=? (car t1) (car t2))(cycle (cdr t1) (cdr t2) (+ i 1) (+ j 1) result)];riga controllata uguale nessuna modifica a result da registrare
              [else;nessuna delle precedenti e verificata
               (let ((delete (list i 'd j (car t1))) ;cancella riga di t1 corrente che stiamo controllando
                 (add (list i 'a j (car t2))))  ;aggiungo riga corrente a t2
                 (cycle (cdr t1) (cdr t2) (+ i 1) (+ j 1)
                 (append ;; Aggiungi sia la cancellazione sia l'aggiunta (se applicaBYli).
                 (if (not (null? t1)) (list delete) '()) ;cancello se posso
                 (if (not (null? t2)) (list add) '())   ;aggiungo se posso
                  result)));rJsultato
               ]
              )
        )
    ))

(define diff
  (lambda (tx1 tx2)
    (reverse (diff-pre tx1 tx2)) ;serve a invertire la stringa ottenuta come output, che altrimenti risulterebbe al contrario 
    ))

;per mostrare agevolemente un esempio digidtare esempio
(define esempio
  
(diff

 (list  ; lcs_v1
  ""
  ";; Longest Common Subsequence (LCS)"
  ";; Algoritmo ricorsivo"
  ""
  "(define lcs      ; val:  stringa"
  "  (lambda (u v)  ; u, v: stringhe"
  "    (cond ((or (= (string-length u) 0) (= (string-length v) 0))"
  "           (string ))  ; stringa vuota"
  "          ((char=? (string-ref u 0) (string-ref v 0))"
  "           (string-append"
  "            (string (string-ref u 0)) (lcs (substring u 1) (substring v 1))))"
  "          (else"
  "           (longer (lcs (substring u 1) v) (lcs u (substring v 1))))"
  "          )))"
  ""
  "(define longer   ; val:  stringa"
  "  (lambda (u v)  ; u, v: stringhe"
  "    (let ((m (string-length u)) (n (string-length v)))"
  "      (if (< m n)"
  "          v"
  "          u))"
  "    ))"
  ""
  )     ; lcs_v1

 (list  ; lcs_v2
  ""
  ";; Longest Common Subsequence (LCS)"
  ";; Algoritmo ricorsivo"
  ""
  "(define lcs      ; val:  stringa"
  "  (lambda (u v)  ; u, v: stringhe"
  "    (cond ((or (= (string-length u) 0) (= (string-length v) 0))"
  "           (string ))  ; stringa vuota"
  "          ((char=? (string-ref u 0) (string-ref v 0))"
  "           (string-append"
  "            (substring u 0 1) (lcs (substring u 1) (substring v 1))))"
  "          (else"
  "           (longer (lcs (substring u 1) v) (lcs u (substring v 1))))"
  "          )))"
  ""
  ";;  Stringa piu' lunga"
  ""
  "(define longer   ; val:  stringa"
  "  (lambda (u v)  ; u, v: stringhe"
  "    (let ((m (string-length u)) (n (string-length v)))"
  "      (cond ((< m n) v)"
  "            ((> m n) u)"
  "            ((= (random 2) 0) v)"
  "            (else u)))"
  "    ))"
  ""
  )     ; lcs_v1

 )  ; diff

)